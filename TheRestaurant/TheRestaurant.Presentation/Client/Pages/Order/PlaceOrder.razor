@* @using System.Text.Json;
@using TheRestaurant.Presentation.Client.Pages.Order.OrderDTO;
@using TheRestaurant.Presentation.Shared.OrderDTO;
@using MudBlazor;
@using TheRestaurant.Presentation.Client.ClientServices;

@inject ISnackbar Snackbar
@inject ClientCartService CartService
@page "/Order"
@inject HttpClient HttpClient

<MudGrid>
    @foreach (var product in products)
    {
        <MudItem xs="12" sm="6" md="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">@product.Name</MudText>
                    <MudButton Color="Color.Primary" @onclick="() => AddToCart(product.Id)">Add to Cart</MudButton>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>


<MudButton Color="Color.Primary" @onclick="() => SubmitOrder()">Färdigställ beställning</MudButton>

@code {
    private Dictionary<int, int> itemQuantities = new Dictionary<int, int>();

    private List<TheRestaurant.Presentation.Client.Pages.Order.ProductModel.ProductModel> products = new List<TheRestaurant.Presentation.Client.Pages.Order.ProductModel.ProductModel>();

    protected override async Task OnInitializedAsync()
    {
        await FetchProducts();
        CartService.CartUpdated += UpdateCart;
    }

    private async Task FetchProducts()
    {
        try
        {
            var response = await HttpClient.GetAsync("Products/GetProducts");
            if (response.IsSuccessStatusCode)
            {
                var productData = await response.Content.ReadFromJsonAsync<List<TheRestaurant.Presentation.Client.Pages.Order.ProductModel.ProductModel>>();
                products = productData ?? new List<TheRestaurant.Presentation.Client.Pages.Order.ProductModel.ProductModel>();
            }
            else
            {
                Snackbar.Add("Failed to load products.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private void AddToOrder(int productId)
    {
        // Implement the logic to add a product to the order
    }
    @code {
        private List<int> cartItems = new List<int>();

        private async Task SubmitOrder()
        {
            var success = await CartService.PlaceOrder("Special instructions", cartItems);
            if (success)
            {
                Snackbar.Add("Order placed successfully.", Severity.Success);
                CartService.ClearCart();
            }
            else
            {
                Snackbar.Add("Failed to place order.", Severity.Error);
            }
        }

        private async Task ViewCart()
        {
            cartItems = await CartService.GetAllCartItems();
            // Now you can use cartItems to display in the UI
        }
    }



    private async Task GetOrder(int id)
    {
        var response = await HttpClient.GetAsync("/order/{id}");

        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadAsStringAsync();
            var order = JsonSerializer.Deserialize<OrderDto>(responseData);
            // Do something with the order...
        }
        else
        {
            // Handle the error...
        }
    }


        private async Task AddToCart(int productId)
        {
            await CartService.AddItemToCartService(productId);
            Snackbar.Add("Product added to cart.", Severity.Success);
        }

    private void UpdateCart()
    {
        // Update UI elements related to the cart, if necessary
        StateHasChanged();
    }

    public void Dispose()
    {
        CartService.CartUpdated -= UpdateCart;
    }
}


 *@