@using System.Text.Json;
@using TheRestaurant.Presentation.Client.Pages.Order.OrderDTO;
@using TheRestaurant.Presentation.Shared.OrderDTO;
@using MudBlazor;
@using System.Net.Http.Json;
@inject ISnackbar Snackbar

@page "/Order"
@inject HttpClient HttpClient

<MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="CreateOrder">Färdigställ beställning</MudButton>
@code {
    private Dictionary<int, int> itemQuantities = new Dictionary<int, int>();

    private const string ServiceEndpoint = "/api/Order";

    private List<ProductDto> products;

    protected override async Task OnInitializedAsync()
    {
        var products = await HttpClient.GetFromJsonAsync<List<ProductDto>>("admin/Products");
        // Do something with the products...
    }

    private async Task CreateOrder()
    {
        var createOrderRequest = new OrderDto
            {
                OrderDate = DateTime.Now,
                OrderItems = new List<OrderProductDto>()
            };

        foreach (var item in itemQuantities)
        {
            var orderItem = new OrderProductDto { ProductId = item.Key, Quantity = item.Value };
            createOrderRequest.OrderItems.Add(orderItem);
        }

        var response = await HttpClient.PostAsJsonAsync("/api/order/Create", createOrderRequest);

        if (response.IsSuccessStatusCode)
        {
            // Parse the response data
            var responseData = await response.Content.ReadAsStringAsync();

            // Deserialize the response data into an OrderDto object
            var order = JsonSerializer.Deserialize<OrderDto>(responseData);

            // Response to user
            Snackbar.Add("Order was successfully created.");
        }
        else
        {
            // Handle an unsuccessful order creation
            Snackbar.Add("Failed to create the order.");
        }
    }



    private async Task GetOrder(int id)
    {
        var response = await HttpClient.GetAsync("/Order/{id}");

        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadAsStringAsync();
            var order = JsonSerializer.Deserialize<OrderDto>(responseData);
            // Do something with the order...
        }
        else
        {
            // Handle the error...
        }
    }



    private void AddOrderItem(int id)
    {
        if (!itemQuantities.ContainsKey(id))
        {
            itemQuantities[id] = 0;
        }

        itemQuantities[id]++;
    }
}
@foreach (var product in products)
{
    var productName = product?.Name ?? "Unknown";
    <div>
        <h2>@productName</h2>
        <p>@product.Description</p>
        <p>@product.Price</p>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" @onclick="() => AddOrderItem(product.Id)">Add to Order</MudButton>
    </div>
}