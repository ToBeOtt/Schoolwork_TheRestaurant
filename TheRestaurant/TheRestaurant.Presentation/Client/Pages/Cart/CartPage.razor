@page "/cart";
@using TheRestaurant.Presentation.Client.ClientServices
@using TheRestaurant.Presentation.Shared.DTO
@using TheRestaurant.Presentation.Shared.DTO.Cart
@inject ClientCartService CartService

@if (!OrderIsMade)
{
    

<MudText Typo="Typo.h4" Class="px-6 py-5">
    Din beställning
</MudText>

<MudTable Items="@AggregatedCartItemsList" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
   
    <HeaderContent>
            <MudTh style="font-weight: 800;">Antal</MudTh>
            <MudTh style="font-weight: 800;">Produkt</MudTh>
            <MudTh style="font-weight: 800;">Pris</MudTh>
            <MudTh style="font-weight: 800;">Ta bort</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Count</MudTd>
        <MudTd DataLabel="Sign">
                    @context.Name @context.Size
        </MudTd>
        <MudTd DataLabel="Name">@context.TotalPrice</MudTd>
        <MudTd DataLabel="Ta bort"> 
            <MudIconButton 
                OnClick="@(() => RemoveCartItem(context.Name))"
                Size="@Size.Small" 
                Color="Color.Error" 
                Icon="@Icons.Material.Filled.Delete"
                />
        </MudTd>
    </RowTemplate>
        <FooterContent>
            <MudTd style="font-weight: 600;">Totalt att betala: </MudTd>
            <MudTd></MudTd>
            <MudTd style="font-weight: 600;">@TotalPriceToPay</MudTd>
            <MudTd></MudTd>
    </FooterContent>

    </MudTable>

    <MudGrid Class="py-4">

     @* Textbox for customer comment *@
        <MudItem xs="12" Class="justify-content-end py-2">
            <MudTextField 
                @bind-Value="@Comment" 
                Class="text-black-50"
                Placeholder="Lägg till kommentar.." 
                Variant="Variant.Text">
                
            </MudTextField>
        </MudItem>

   
    @* Button for cancel or order *@
        <MudItem xs="12" Class="justify-content-start py-5 px-6">
            <MudButton 
                Variant="Variant.Filled"
                Color="Color.Primary"
                   OnClick="@(() => ActivatePlaceOrder())">
                Lägg order
            </MudButton>
        
            <MudButton 
                Class="mx-4"
                Variant="Variant.Filled"
                Color="Color.Primary"
                OnClick="@(() => ActivateClearCart())">
                Ta bort beställning
            </MudButton>
        </MudItem>
    </MudGrid>
}
@if (@OrderIsMade)
    {
        <p>
            <MudText 
                Typo="Typo.h6" 
                Class="px-6 py-5"
                Color="@Color.Secondary">
                Tack för din beställning, den kommer snart påbörjas av köket.
            </MudText>

            <MudText Typo="Typo.h5"
                     Class="px-6 pt-5"
                     Color="@Color.Secondary">
                Ditt ordernummer är:
            </MudText>
            <MudText 
                Typo="Typo.h3" 
                Class="px-6 fw-bolder">
                @OrderNr
            </MudText>
            
       
        </p>
        <p>
        <MudText 
            Typo="Typo.subtitle2" 
            Class="px-6 py-5"
            Color="@Color.Warning">
            Vänligen spara ditt order-nummer.
        </MudText>
        </p>   
    }

 

@code {
    private List<CartDto> CartItems = new();

    private List<AggregatedCartDto> AggregatedCartItemsList = new();

    private double TotalPriceToPay = 0;

    private string Comment;

    protected override async Task OnInitializedAsync()
    {
        CartItems = await CartService.GetAllCartItems();

        SortCart(CartItems);
    }

    private async Task SortCart(List<CartDto> list)
    {
        AggregatedCartItemsList = await CartService.SortCartItems(CartItems);

        var totalPriceList = AggregatedCartItemsList.Select(x => x.TotalPrice).ToList();
        TotalPriceToPay = await CartService.TotalPriceOfCartItems(totalPriceList);
        StateHasChanged();
    }

    private async void RemoveCartItem(string name)
    {
        CartDto itemToRemove = CartItems.FirstOrDefault(x => x.Name == name);

        if (itemToRemove != null)
        {
            if (await CartService.DeleteCartItem(itemToRemove.Id))
            {
                CartItems.Remove(itemToRemove);
                await CartService.UpdateCartService();
                await SortCart(CartItems);
            }
        }
    }

    private async Task ActivateClearCart()
    {
        await CartService.ClearCart();
        AggregatedCartItemsList = null;
        StateHasChanged();

    }

    private bool OrderIsMade;
    private int OrderNr;
    private string OrderPlacedFailedMessage;

    private async Task ActivatePlaceOrder()
    {

        var result = await CartService.PlaceOrder(Comment, AggregatedCartItemsList);

        // FIXA NÅN PRESENTATION AV ORDER OCH CLEARA ALLT?
        if (result.IsSuccess)
        {
            ActivateClearCart();
            await CartService.UpdateCartService();
            OrderIsMade = true;
            OrderNr = result.OrderNr;
        }

        // FELHANTERING
        else
            OrderPlacedFailedMessage = 
            "Tyvärr gick din order inte att genomföra. Vänligen ta kontakt med kassa-personal.";
    }
}