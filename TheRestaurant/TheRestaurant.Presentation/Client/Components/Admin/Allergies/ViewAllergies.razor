@using TheRestaurant.Contracts.Requests.Allergy

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject RoleService RoleService
@inject ISnackbar Snackbar


@using TheRestaurant.Contracts.DTOs
@using TheRestaurant.Presentation.Client.ClientServices;

<MudTable Items="@allergies" Dense=true Hover=true Bordered=false Striped=false Elevation="0" Loading=@loading>

    <ToolBarContent>
        <MudText Typo="Typo.h5">Allergier</MudText>

        <MudSpacer />

        <MudSwitch @bind-Checked="@filtering" Label="Aktivera Filtrering!" Color="Color.Primary" />


    </ToolBarContent>

    <HeaderContent>

        <MudTh Class="fw-bold">Id</MudTh>
        <MudTh Class="fw-bold"> <MudTableSortLabel Enabled="filtering" InitialDirection="SortDirection.Ascending" SortBy="new Func<AllergyDto, object>(x=>x.Name)">Namn</MudTableSortLabel></MudTh>
        <MudTh></MudTh>

        <MudTh Class="fw-bold">Synlighet</MudTh>
        <MudTh> <MudTableSortLabel Enabled="filtering" InitialDirection="SortDirection.Ascending" SortBy="new Func<AllergyDto, object>(x=>x.IsDeleted)">Synlighet</MudTableSortLabel></MudTh>

        @if (IsManager)
        {
            <MudTh>
                <MudButton FullWidth Variant="Variant.Filled" Color="Color.Secondary" OnClick="@((e) => CreateAllergy(maxWidth))">Ny Allergi</MudButton>
             </MudTh>
        }

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Namn">@context.Name</MudTd>
        <MudTd>
            <MudSpacer />
        </MudTd>
        <MudTd>
            @if (@context.IsDeleted == true)
            {

                <MudText>Dold</MudText>

            }
            else
            {
                <MudText>Synlig</MudText>
            }

        </MudTd>
        @if (IsManager)
        {
            <MudTd>
                <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary" DisableElevation>
                 <MudIconButton Icon="@Icons.Material.Filled.EditNote" Variant="Variant.Filled" Color="Color.Primary" DisableElevation
                                    OnClick="@((e) => UpdateAllergy(maxWidth, context))" />
                     @if (context.IsDeleted is true)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Variant="Variant.Filled" Color="Color.Primary"
                                              DisableElevation
                                        OnClick="@((e) => SoftDelete(!context.IsDeleted ,context.Id))" />
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.RemoveRedEye" Variant="Variant.Filled" Color="Color.Primary"
                                              DisableElevation
                                        OnClick="@((e) => SoftDelete(!context.IsDeleted ,context.Id))" />

                    }


                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" DisableElevation
                                    OnClick="@((e) => DeleteAllergy(maxWidth ,context))" />

                 </MudButtonGroup>
             </MudTd>
        }


    </RowTemplate>

</MudTable>



@code {
    private List<AllergyDto> allergies;
    private bool loading;
    private bool placeholderSwitch;
    private bool filtering = false;
    private bool IsManager;


    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        allergies = await HttpClient.GetFromJsonAsync<List<AllergyDto>>("/api/allergy");

        var roles = await RoleService.GetRolesAsync();
        if (roles.IsManager == true)
        {
            IsManager = true;
        }


    }

    //Currently not used.
    private async Task SoftDelete(bool IsDeleted, int id)
    {
        var allergy = await HttpClient.GetFromJsonAsync<AllergyDto>($"/api/allergy/{id}");

        allergy.IsDeleted = IsDeleted;

        var request = new AllergyRequest(Name: allergy.Name, IsDeleted: allergy.IsDeleted);
        var response = await HttpClient.PutAsJsonAsync($"/api/allergy/edit/{allergy.Id}", request);

        if (response.IsSuccessStatusCode && IsDeleted == false)
        {
            Snackbar.Add($"Allergi {allergy.Name} synlig", Severity.Success);
            allergies = await HttpClient.GetFromJsonAsync<List<AllergyDto>>("/api/allergy");
            StateHasChanged();
        }
        else if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Allergi {allergy.Name} dold", Severity.Success);
            allergies = await HttpClient.GetFromJsonAsync<List<AllergyDto>>("/api/allergy");
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Döljning av allergi misslyckades", Severity.Error);
        }
    }

    private async Task CreateAllergy(DialogOptions options)
    {

        var dialog = await DialogService.ShowAsync<CreateAllergy>("", options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            allergies = await HttpClient.GetFromJsonAsync<List<AllergyDto>>("/api/allergy");
            StateHasChanged();
        }

    }

    private async Task UpdateAllergy(DialogOptions options, AllergyDto allergy)
    {

        var parameters = new DialogParameters<UpdateAllergy>
        {
            { x => x.allergy, allergy}
        };

        var dialog = await DialogService.ShowAsync<UpdateAllergy>("", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            allergies = await HttpClient.GetFromJsonAsync<List<AllergyDto>>("/api/allergy");
            StateHasChanged();
        }

    }

    private async Task DeleteAllergy(DialogOptions options, AllergyDto allergy)
    {
        var parameters = new DialogParameters<DeleteAllergy>
        {
            { x => x.allergy, allergy}
        };

        var dialog = await DialogService.ShowAsync<DeleteAllergy>("", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            allergies = await HttpClient.GetFromJsonAsync<List<AllergyDto>>("/api/allergy");
            StateHasChanged();
        }

    }

}
