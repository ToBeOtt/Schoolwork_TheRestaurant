@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@using TheRestaurant.Contracts.DTOs

<MudTable Items="@allergies" Dense=true Hover=true Bordered=false Striped=false Elevation="0" Loading=@loading>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Allergi Typer</MudText>

        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Secondary">Ny Allergi</MudButton>

        <MudSwitch @bind-Checked="@filtering" Label="Aktivera Filtrering" Color="Color.Primary" />


    </ToolBarContent>

    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh> <MudTableSortLabel Enabled="filtering" InitialDirection="SortDirection.Ascending" SortBy="new Func<AllergyDto, object>(x=>x.Name)">Namn</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
        <MudTh>Synlighet</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Namn">@context.Name</MudTd>
        <MudTd>
            <MudSpacer />
        </MudTd>
        <MudTd>
            @if (@context.IsHidden == true)
            {

                <MudSwitch @bind-Checked="@context.IsHidden" Label="Dold" Color="Color.Primary" />
                //<MudSwitch @bind-Checked="@(() => HiddenStatus(context.IsHidden, context.Id))" Label="Dold" Color="Color.Primary" />

            }
            else
            {
                <MudSwitch @bind-Checked="@context.IsHidden" Label="Synlig" Color="Color.Primary" />
            }

        </MudTd>
        <MudTd>
            <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary" DisableElevation>
                <MudIconButton Icon="@Icons.Material.Filled.EditNote" Variant="Variant.Filled" Color="Color.Primary" DisableElevation />
                 <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" DisableElevation />

             </MudButtonGroup>
         </MudTd>

     </RowTemplate>

 </MudTable>



 @code {
    private List<AllergyDto> allergies;
    private bool loading;
    private bool placeholderSwitch;
    private bool filtering = false;

    protected override async Task OnInitializedAsync()
    {
        allergies = await HttpClient.GetFromJsonAsync<List<AllergyDto>>("/api/allergy");
    }

    private async Task HiddenStatus(bool isHidden, int id)
    {
        var allergy = await HttpClient.GetFromJsonAsync<AllergyDto>("/api/allergy/{id}");

        allergy.IsHidden = isHidden;

        await HttpClient.PutAsJsonAsync<AllergyDto>($"/api/allergy/edit/{allergy.Id}", allergy);
    }
}
