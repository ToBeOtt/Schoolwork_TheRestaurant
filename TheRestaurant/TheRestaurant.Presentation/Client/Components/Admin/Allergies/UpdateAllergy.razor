@using TheRestaurant.Contracts.DTOs
@using TheRestaurant.Contracts.Requests.Allergy
@inject ISnackbar Snackbar
@inject HttpClient HttpClient


<MudDialog>
   <TitleContent>
        <MudText Typo="Typo.h4">Uppdatera @allergy.Name</MudText>
   </TitleContent>
    <DialogContent>
        <EditForm Model="@allergy" OnValidSubmit="AllergyUpdate">
            <DataAnnotationsValidator />
            <MudTextField AdornmentColor="Color.Warning" Label="Namn" HelperText="Får max innehålla 30 tecken"
            @bind-Value="allergy.Name" For="@(() => allergy.Name)" />
            <MudButton ButtonType="ButtonType.Submit" Class="ma-1" Variant="Variant.Filled" Color="Color.Success" DisableElevation FullWidth>Uppdatera</MudButton>
            <MudButton Class="ma-1" Variant="Variant.Filled" Color="Color.Primary" DisableElevation FullWidth OnClick="Cancel">Avbryt</MudButton>
         </EditForm>
     </DialogContent>

    

</MudDialog>


 @code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public AllergyDto allergy { get; set; }

    private void Cancel()
    {
        Snackbar.Add("Uppdatering av allergi avbrutet", Severity.Info);
        MudDialog.Cancel();
    }

    private async void AllergyUpdate()
    {
        var request = new AllergyRequest(Name: allergy.Name);
        HttpResponseMessage response = await HttpClient.PutAsJsonAsync($"/api/allergy/edit/{allergy.Id}", request);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Allergi {allergy.Name} uppdaterad", Severity.Success);
            MudDialog.Close(DialogResult.Ok(allergy.Id));
        }
        else
        {
            Snackbar.Add("Uppdatering av allergi misslyckades", Severity.Error);
            MudDialog.Close(DialogResult.Ok(allergy.Id));
        }
        
    }

}
