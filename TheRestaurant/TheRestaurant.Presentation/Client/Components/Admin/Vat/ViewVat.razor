@using TheRestaurant.Contracts.DTOs
@using MudBlazor
@using TheRestaurant.Presentation.Client.Shared.Admin
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<AdminLayout>
    <AdminContent>
        <MudGrid Spacing="2" Justify="Justify.Center">

            <MudItem xs="12">
  
                    @if (vats != null && vats.Count > 0)
                    {
                    <MudTable 
                        Items="@vats"
                        Dense=true 
                        Hover=true 
                        Bordered=false 
                        Striped=false 
                        Elevation="0" 
                        >

                        <ToolBarContent>
                            <MudText Class="py-6 px-5"
                                        Typo="Typo.h5">
                                Moms
                            </MudText> 
                        </ToolBarContent>

                        <HeaderContent>

                            <MudTh Class="fw-bold">Id</MudTh>
                            <MudTh Class="fw-bold">Varor</MudTh>
                            <MudTh Class="fw-bold">Momssats</MudTh>
                            <MudTh>
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Secondary"
                                           OnClick="() => NavigateToCreateVat()">
                                    Ny moms
                                </MudButton>
                            </MudTh>
                            

                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Id">@context.Id</MudTd>
                            <MudTd DataLabel="Namn">@context.Name</MudTd>
                            <MudTd DataLabel="Adjustment">@context.Adjustment</MudTd>
                            <MudTd>
                                <MudButtonGroup 
                                    Variant="Variant.Filled" 
                                    Color="Color.Primary" 
                                    DisableElevation>

                                    <MudIconButton 
                                        Icon="@Icons.Material.Filled.EditNote" 
                                        Variant="Variant.Filled" 
                                        Color="Color.Primary" 
                                        DisableElevation
                                        OnClick="() => NavigateToEditVat(context.Id)" />

                                    <MudIconButton 
                                        Icon="@Icons.Material.Filled.Delete" 
                                        Variant="Variant.Filled" 
                                        Color="Color.Primary" 
                                        DisableElevation
                                        OnClick="() => DeleteVat(context.Id)" />

                                </MudButtonGroup>
                                </MudTd>
         
                        </RowTemplate>
                    </MudTable>
                    }

                    else
                    {
                        <MudText Typo="Typo.body1">Hittade ingen moms</MudText>
                    }

            </MudItem>

        </MudGrid>
    </AdminContent>
</AdminLayout>

@code {
    private List<VATDto> vats;

    protected override async Task OnInitializedAsync()
    {
        vats = await HttpClient.GetFromJsonAsync<List<VATDto>>("admin/vat");
    }

    private void NavigateToCreateVat()
    {
        NavigationManager.NavigateTo($"/admin/vat/create");
    }

    private void NavigateToEditVat(int id)
    {
        NavigationManager.NavigateTo($"/admin/vat/edit/{id}");
    }
    private async void DeleteVat(int id)
    {
        var apiUrl = $"admin/vat/{id}";
        var response = await HttpClient.DeleteAsync(apiUrl);
        if (response.IsSuccessStatusCode)
        {
            vats = await HttpClient.GetFromJsonAsync<List<VATDto>>("admin/vat");
            StateHasChanged();
        }
    }


}