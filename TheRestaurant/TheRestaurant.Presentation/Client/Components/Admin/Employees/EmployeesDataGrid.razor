@using TheRestaurant.Presentation.Client.ClientServices
@using TheRestaurant.Presentation.Shared.DTO.Employees
@inject NavigationManager Navigation
@inject ClientEmployeeServices EmployeeService

<MudGrid>

    <MudItem xs="9">
        <MudText Class="p-10 px-5"
                 Typo="Typo.h5">
            Anställda
        </MudText>
    </MudItem>

    <MudItem xs="3">
        <MudTooltip Text="Lägg till anställd">
            <MudIconButton 
                Class="mx-10"
                Size="@Size.Medium"
                Color="Color.Tertiary"
                Icon="@Icons.Material.Outlined.Add"
                OnClick="@AddEmployee" />
            </MudTooltip>
        </MudItem>
      
    <MudItem>
        <MudDataGrid 
            Elevation="0"
            Items="@FilteredEmployees">
            <ToolBarContent>
                <MudSelect 
                    Class="m-10 pb-10"
                    T="string" 
                    Label="Filtrera" 
                    AnchorOrigin="Origin.BottomCenter"
                           ValueChanged="@FilterData">

                    <MudSelectItem Value="@("0")"> Anställda </MudSelectItem>
                    <MudSelectItem Value="@("1")"> Tidigare anställda </MudSelectItem>
                    <MudSelectItem Value="@("2")"> Föräldralediga </MudSelectItem>
                </MudSelect>
            </ToolBarContent>
            <Columns>
                <TemplateColumn Class="fw-bold" Title="AnställningsNr">
                    <CellTemplate>
                        @($"{context.Item.Id.Substring(0, Math.Min(10, context.Item.Id.Length))} ...")
                    </CellTemplate>
                </TemplateColumn>

                <PropertyColumn Class="fw-bold" Property="x => x.Alias" Title="Namn" />
                <PropertyColumn Class="fw-bold" Property="x => x.Email" Title="Epost" />
                <PropertyColumn Class="fw-bold" Property="x => x.HireDate" Title="Anställningsdatum" Format="yyyy-MM-dd" />

                <TemplateColumn Title="Edit">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditEmployee(context.Item.Id))" />
                    </CellTemplate>
                </TemplateColumn>

                

                <TemplateColumn Title="Delete">
                    <CellTemplate>
                        @if (!context.Item.IsDeleted)
                        {
                            <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteEmployee(context.Item.Id))" />
                        }
                    </CellTemplate>
                </TemplateColumn>

              

            </Columns>
        </MudDataGrid>
    </MudItem>


    <MudItem>
        @if (Affirmation != null)
        {
            <MudAlert Severity="Severity.Success">
                @Affirmation
            </MudAlert>
        }
    </MudItem>
</MudGrid>



@code {
    private int FilterValue;

    private async Task FilterData(string value)
    {
        FilterValue = Convert.ToInt32(value);
        FilteredEmployees = await EmployeeService.FilterEmployees(FilterValue, Employees);
    }

    // Fetch all employees
    private List<EmployeeDto> Employees = new List<EmployeeDto>();
    private List<EmployeeDto> FilteredEmployees = new List<EmployeeDto>();
    private List<EmployeeDto> originalEmployees = new List<EmployeeDto>();

    protected override async Task OnInitializedAsync()
    {
        Employees = await EmployeeService.GetAllEmployees(new List<EmployeeDto>());
        originalEmployees.AddRange(Employees);
        FilteredEmployees.AddRange(Employees);
    }

    // Add employee
    private async Task AddEmployee()
    {
        Navigation.NavigateTo("/admin/employees/AddEmployee");
    }


    // Edit and delete
    private string Affirmation = null;
    private void EditEmployee(string employeeId)
    {
        Navigation.NavigateTo($"/admin/employees/EditEmployee/{employeeId}");
    }


    [Inject] private IDialogService DialogService { get; set; }
    bool ConfirmDelete = false;

    private async void DeleteEmployee(string employeeId)
    {
        bool? result = await DialogService.ShowMessageBox(
           "Warning",
           "Deleting can not be undone!",
           yesText: "Delete!", cancelText: "Cancel");
        ConfirmDelete = result == null ? false : true;
        StateHasChanged();

        if (ConfirmDelete == true)
        {
            if(await EmployeeService.DeleteEmployee(employeeId))
            {
                Affirmation = "Anställd borttagen";
                Employees.RemoveAll(e => e.Id == employeeId);
                StateHasChanged();
            }

            else 
                Affirmation = "Något gick fel. Kontakta IT-support.";
        }
    }
}
