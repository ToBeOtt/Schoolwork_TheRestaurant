@using TheRestaurant.Contracts.DTOs.OrderDTOs;
@using TheRestaurant.Presentation.Client.ClientServices;


@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject ClientOrderService OrderService
@inject AuthenticationStateProvider AuthStateProvider




<MudDialog>
    <TitleContent>
        <MudText Align="Align.Center" Color="Color.Warning" Typo="Typo.h5">Du är på väg att ta bort en order!</MudText>
    </TitleContent>
    <DialogContent>
        <MudText Align="Align.Center" Typo="Typo.h5">Är du säker på att du vill ta bort order: <strong>@order.OrderNr</strong></MudText>
        @if (order.Comment != null)
        {
            <CascadingValue Value="@order.Comment">
                <OrderComment />
            </CascadingValue>
        }
        <MudTable Class="mt-0" Items="@order.ProductAndQuantity" Dense=true Hover=true Bordered=false Striped=false Elevation="0">
            <HeaderContent>
                <MudTh>Namn</MudTh>
                <MudTh></MudTh>
                <MudTh>Antal</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.ProductName</MudTd>
                <MudTd><MudSpacer /></MudTd>
                <MudTd>@context.Quantity</MudTd>
            </RowTemplate>

        </MudTable>

    </DialogContent>

    <DialogActions>
        <MudButton Class="ma-1" Variant="Variant.Filled" Color="Color.Warning" DisableElevation FullWidth OnClick="ConfirmOrderDelete">Ja</MudButton>
         <MudButton Class="ma-1" Variant="Variant.Filled" Color="Color.Primary" DisableElevation FullWidth OnClick="Cancel">Avbryt</MudButton>
     </DialogActions>

 </MudDialog>

 @code {

    private bool OrderProcessed;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public PendingOrderDto order { get; set; }
    private string userId;


    protected override async void OnParametersSet()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var UserIdClaim = user.Claims.FirstOrDefault(x => x.Type == "UserId");
        userId = UserIdClaim.Value;
        base.OnParametersSet();
    }

    private void Cancel()
    {

        Snackbar.Add("Hantering av order avbruten", Severity.Info);
        MudDialog.Cancel();
    }

    private async Task ConfirmOrderDelete()
    {
        
        await OrderService.CancelCustomerOrder(order.OrderNr);

        // if (OrderProcessed)
        // {
            Snackbar.Add($"Order {order.OrderNr} är borttagen.", Severity.Warning);
            MudDialog.Close(DialogResult.Ok(order.OrderNr));
            StateHasChanged();
        // }
        // else
        // {
        //     Snackbar.Add($"Order {order.OrderNr} kunde inte tas bort.", Severity.Error);
        //     MudDialog.Close(DialogResult.Ok(order.OrderNr));
        // }

    }
}
