@using TheRestaurant.Contracts.DTOs.OrderDTOs;
@using TheRestaurant.Presentation.Client.ClientServices;

@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject ClientOrderService OrderService
@inject AuthenticationStateProvider AuthStateProvider



<MudDialog>
    <TitleContent>
        <MudText Align="Align.Center" Typo="Typo.h5">Du är på väg att påbörja hantering av en order</MudText>
    </TitleContent>
    <DialogContent>
        <MudText Align="Align.Center" Typo="Typo.h5">Är du säker på att vill påbörja hantering av order: <strong>@order.OrderNr</strong></MudText>
        @if (order.Comment != null)
        {
            <CascadingValue Value="@order.Comment">
                <OrderComment />
            </CascadingValue>
        }
        <MudTable Class="mt-0" Items="@order.ProductAndQuantity" Dense=true Hover=true Bordered=false Striped=false Elevation="0">
             <HeaderContent>
                 <MudTh>Namn</MudTh>
                 <MudTh></MudTh>
                 <MudTh>Antal</MudTh>
             </HeaderContent>
             <RowTemplate>
                @if(@context.Size != null)
                {
                    <MudTd>@context.ProductName (@context.Size)</MudTd>
                }
                else
                {
                    <MudTd>@context.ProductName</MudTd>
                }
                 <MudTd><MudSpacer /></MudTd>
                 <MudTd>@context.Quantity</MudTd>
             </RowTemplate>

         </MudTable>

     </DialogContent>

     <DialogActions>
         <MudButton Class="ma-1" Variant="Variant.Filled" Color="Color.Success" DisableElevation FullWidth OnClick="ConfirmOrderTaken">Ja</MudButton>
         <MudButton Class="ma-1" Variant="Variant.Filled" Color="Color.Primary" DisableElevation FullWidth OnClick="Cancel">Avbryt</MudButton>
     </DialogActions>

 </MudDialog>

 @code {

    private bool OrderProcessed;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public PendingOrderDto order { get; set; }
    private string userId;


    protected override async void OnParametersSet()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var UserIdClaim = user.Claims.FirstOrDefault(x => x.Type == "UserId");
        userId = UserIdClaim.Value;
        base.OnParametersSet();
    }

    private void Cancel()
    {

        Snackbar.Add("Hantering av order avbruten", Severity.Info);
        MudDialog.Cancel();
    }

    private async Task ConfirmOrderTaken()
    {
        //Two calls, refactor into one?
        OrderProcessed = await OrderService.UpdateOrderUser(order.OrderNr, userId);
        OrderProcessed = await OrderService.UpdateOrderStatus(order.OrderNr, "Processing");

        if (OrderProcessed)
        {
            Snackbar.Add($"Order {order.OrderNr} är påbörjad.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(order.OrderNr));
            StateHasChanged();
        }
        else
        {
            Snackbar.Add($"Order {order.OrderNr} kunde inte påbörjas.", Severity.Error);
            MudDialog.Close(DialogResult.Ok(order.OrderNr));
        }

    }
}
