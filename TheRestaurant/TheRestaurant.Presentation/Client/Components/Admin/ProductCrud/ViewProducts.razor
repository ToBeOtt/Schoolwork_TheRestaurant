@using MudBlazor
@using TheRestaurant.Presentation.Client.Components.Admin.ProductCrud.DTO;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@if (Error == true)
{
    <p>@ErrorMessage</p>
}

<MudGrid Spacing="2" Justify="Justify.Center">

    <MudItem xs="12">
        <div class="px-3 mb-5">
            <div class="d-flex justify-content-between mb-3">
                <h3>Produkt Lista</h3>
                <!-- Assuming you have a way to navigate to create a new product -->
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@NavigateToCreateProduct">Create New</MudButton>
            </div>

            @if (products != null && products.Count > 0)
            {
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Description</th>
                            <th>Active</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in products)
                        {
                            <tr>
                                <td>@product.Id</td>
                                <td>
                                    <MudButton OnClick="@(() => NavigateToViewSpecificProduct(product.Id))" Style="padding: 0; border: none; background: none;">
                                        <img src="@GetImageSource(product.MenuPhoto)" alt="@product.Name" style="width: 100px; height: 75px; object-fit: cover; cursor: pointer;" />
                                    </MudButton>
                                </td>
                                <td>@product.Name</td>
                                <td>@product.Price kr</td>
                                <td>@product.Description</td>
                                <td>
                                    @if (!product.IsDeleted)
                                    {
                                        <MudIcon Icon="@Icons.Filled.Check" Color="Color.Success" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Filled.Close" Color="Color.Error" />
                                    }
                                </td>
                                <td>
                                    <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="@(() => NavigateToEditProduct(product.Id))">
                                        <MudIcon Icon="@Icons.Filled.Edit"/>
                                    </MudButton>
                                    @if (!product.IsDeleted)
                                    {
                                        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="@(() => DeleteProduct(product.Id))">
                                            <MudIcon Icon="@Icons.Filled.Delete"/>
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="@(() => ReactivateProduct(product.Id))">
                                            <MudIcon Icon="@Icons.Filled.CheckCircle"/>
                                        </MudButton>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <MudText Typo="Typo.body1">Laddar...</MudText>
            }
        </div>
    </MudItem>

</MudGrid>
<DeleteProductConfirmation @ref="deleteProductConfirmation" OnConfirmDelete="DeleteProduct" />

@code {
    private List<ProductDto> products;
    private DeleteProductConfirmation deleteProductConfirmation;

    private bool Error;
    private string ErrorMessage;

    private string GetImageSource(byte[] photo)
    {
        return $"data:image/jpeg;base64,{Convert.ToBase64String(photo)}";
    }
    protected override async Task OnInitializedAsync()
    {
        products = await HttpClient.GetFromJsonAsync<List<ProductDto>>("/admin/products");
    }

    private void NavigateToEditProduct(int id)
    {
        NavigationManager.NavigateTo($"/admin/product/edit/{id}");
    }

    private void NavigateToViewSpecificProduct(int id)
    {
        NavigationManager.NavigateTo($"/admin/product/view/{id}");
    }


    private void ShowConfirmation(int id)
    {
        deleteProductConfirmation.Show("Confirmation message", id);
    }

    private async Task ConfirmDeleteProduct(int id)
    {
        await DeleteProduct(id);
    }

    private async Task DeleteProduct(int id)
    {
        var apiUrl = $"/admin/products/delete/{id}";

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Put, apiUrl);
            var response = await HttpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                products = await HttpClient.GetFromJsonAsync<List<ProductDto>>("admin/products");
            }

            else
            {
                Error = true;
                ErrorMessage = "Det gick inte att registrera informationen";
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to delete product. Response content: {responseContent}");
            }
        }
        catch (Exception ex)
        {
            Error = true;
            ErrorMessage = $"An exception occurred: {ex.Message}";
            Console.WriteLine($"An exception occurred: {ex}");
        }


    }

    private void NavigateToCreateProduct()
    {
        NavigationManager.NavigateTo($"/admin/product/create");
    }

    private void ReactivateProduct(int id)
    {
        
    }
}

