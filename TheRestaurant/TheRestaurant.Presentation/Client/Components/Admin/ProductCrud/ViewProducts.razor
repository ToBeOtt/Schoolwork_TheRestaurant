@using MudBlazor
@using TheRestaurant.Presentation.Client.Components.Admin.ProductCrud.DTO;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@if (Error == true)
{
    <p>@ErrorMessage</p>
}

else if(products != null)
{
    <MudGrid Justify="Justify.FlexStart">
        @foreach (var product in products)
        {
        <MudItem xs="3">
                <MudCard Class="mud-secondary">
                    <MudCardMedia Image="@GetImageSource(product.MenuPhoto)" Height="200" />
                <MudCardContent>
                    <MudText Typo="Typo.h5" Color="Color.Primary">@product.Name</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Primary">Pris: @product.Price</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Primary">@product.Description</MudText>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-space-between">
                        <MudButton Class="ml-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ShowConfirmation(product.Id))">Radera</MudButton>
                        <MudButton Variant="Variant.Text" OnClick="@(() =>NavigateToViewSpecificProduct(product.Id))">Detaljer</MudButton>
                        <MudButton Class="mr-2" Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => NavigateToEditProduct(product.Id))">Edit</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        }
    </MudGrid>
}
<MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mt-5" OnClick="NavigateToCreatePage">Skapa en ny produkt</MudButton>
@*<button class="btn btn-primary" @onclick="NavigateToCreatePage">Create New Menu Item</button>*@
<DeleteProductConfirmation @ref="deleteProductConfirmation" OnConfirmDelete="DeleteProduct" />

@code {
    private List<ProductDto> products;
    private DeleteProductConfirmation deleteProductConfirmation;

    private bool Error;
    private string ErrorMessage;

    private string GetImageSource(byte[] photo)
    {
        return $"data:image/jpeg;base64,{Convert.ToBase64String(photo)}";
    }
    protected override async Task OnInitializedAsync()
    {
        products = await HttpClient.GetFromJsonAsync<List<ProductDto>>("/admin/products");
    }

    private void NavigateToCreatePage()
    {
        NavigationManager.NavigateTo("/admin/product/create");
    }

    private void NavigateToEditProduct(int id)
    {
        NavigationManager.NavigateTo($"/admin/product/edit/{id}");
    }

    private void NavigateToViewSpecificProduct(int id)
    {
        NavigationManager.NavigateTo($"/admin/product/view/{id}");
    }

    private int productToDeleteId;
    private void ShowConfirmation(int id)
    {
        productToDeleteId = id;
        deleteProductConfirmation.Show("Är du säker att du vill ta radera den här produkten?", () => DeleteProduct(id));
    }

    private async Task DeleteProduct(int id)
    {
        id = productToDeleteId;
        var apiUrl = $"/admin/product/delete/{id}";

        var request = new HttpRequestMessage(HttpMethod.Put, apiUrl);
        var response = await HttpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            products = await HttpClient.GetFromJsonAsync<List<ProductDto>>("admin/products");
        }

        else
        {
            Error = true;
            ErrorMessage = "Det gick inte att registrera informationen";
        }
    }
}

