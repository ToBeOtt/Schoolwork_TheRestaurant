@using MudBlazor
@using TheRestaurant.Presentation.Client.Components.Admin.ProductCrud.DTO;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager


@if (Error == true)
{
    <p>@ErrorMessage</p>
}

@if (products != null)
{
   

    <MudGrid Justify="Justify.FlexStart">
        
        <MudItem xs="9">
            <MudText Class="py-6 px-5"
                     Typo="Typo.h5">
                Produkter
            </MudText>
        </MudItem>

        <MudItem xs="3">
            <MudTooltip Text="Lägg till produkt">
                <MudIconButton Class="mx-10 my-6"
                               Size="@Size.Medium"
                               Color="Color.Tertiary"
                               Icon="@Icons.Material.Outlined.Add"
                               OnClick="@NavigateToAddProduct" />
            </MudTooltip>
        </MudItem>
        @foreach (var product in products)
        {
           

            <MudItem xs="12" sm="6" md="4" lg="4">
                <MudCard Class="mud-secondary" Style="margin: 15px;">
                    <MudCardMedia Image="@GetImageSource(product.MenuPhoto)" Style="height: 150px; object-fit: cover;" />
                    <MudCardContent Style="min-height: 180px;">
                        <!-- Set a minimum height -->
                        <MudText Typo="Typo.h5" Color="Color.Primary">@product.Name</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Primary">Pris: @product.Price</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Primary">@product.Description</MudText>
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-space-between">
                        <MudButton Class="ml-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ShowConfirmation(product.Id))">Radera</MudButton>
                        <MudButton Variant="Variant.Text" OnClick="@(() =>NavigateToViewSpecificProduct(product.Id))">Detaljer</MudButton>
                        <MudButton Class="mr-2" Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => NavigateToEditProduct(product.Id))">Edit</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
<DeleteProductConfirmation @ref="deleteProductConfirmation" OnConfirmDelete="DeleteProduct" />

@code {
    private List<ProductDto> products;
    private DeleteProductConfirmation deleteProductConfirmation;

    private bool Error;
    private string ErrorMessage;

    private string GetImageSource(byte[] photo)
    {
        return $"data:image/jpeg;base64,{Convert.ToBase64String(photo)}";
    }
    protected override async Task OnInitializedAsync()
    {
        products = await HttpClient.GetFromJsonAsync<List<ProductDto>>("/admin/products");
    }

    private void NavigateToAddProduct()
    {
        NavigationManager.NavigateTo("/admin/product/create");
    }

    private void NavigateToEditProduct(int id)
    {
        NavigationManager.NavigateTo($"/admin/product/edit/{id}");
    }

    private void NavigateToViewSpecificProduct(int id)
    {
        NavigationManager.NavigateTo($"/admin/product/view/{id}");
    }


    private void ShowConfirmation(int id)
    {
        deleteProductConfirmation.Show("Confirmation message", id);
    }

    private async Task ConfirmDeleteProduct(int id)
    {
        await DeleteProduct(id);
    }

    private async Task DeleteProduct(int id)
    {
        var apiUrl = $"/admin/products/delete/{id}";

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Put, apiUrl);
            var response = await HttpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                products = await HttpClient.GetFromJsonAsync<List<ProductDto>>("admin/products");
            }

            else
            {
                Error = true;
                ErrorMessage = "Det gick inte att registrera informationen";
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to delete product. Response content: {responseContent}");
            }
        }
        catch (Exception ex)
        {
            Error = true;
            ErrorMessage = $"An exception occurred: {ex.Message}";
            Console.WriteLine($"An exception occurred: {ex}");
        }
        
        
    }
}

