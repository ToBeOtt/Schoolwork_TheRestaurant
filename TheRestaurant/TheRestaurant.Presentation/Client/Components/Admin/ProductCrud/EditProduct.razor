@using TheRestaurant.Contracts.Requests.Product;
@using TheRestaurant.Presentation.Client.Components.Admin.ProductCrud.Validation;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<style>
    .form {
        padding-left: 25px;
    }
</style>
@if (Error)
{
    <p>@ErrorMessage</p>
}
<div class="form">
    <EditForm Model="_editProduct" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group row">
            <div class="col-md-3">
                <label for="name" class="control-label col-md-2">Namn</label>
                <InputText id="name" class="form-control" @bind-Value="_editProduct.Name" />
                <ValidationMessage For="@(() => _editProduct.Name)" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-3">
                <label for="price" class="control-label col-md-2">Pris</label>
                <InputNumber id="price" class="form-control" @bind-Value="_editProduct.Price" />
                <ValidationMessage For="@(() => _editProduct.Price)" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-3">
                <label for="description" class="control-label col-md-2">Beskrivning</label>
                <InputTextArea id="description" class="form-control" @bind-Value="_editProduct.Description" />
                <ValidationMessage For="@(() => _editProduct.Description)" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-3">
                <label for="isFoodItem" class="control-label">Food item?</label>
                <InputCheckbox id="isFoodItem" @bind-Value="_editProduct.IsFoodItem" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-4">
                <label for="menuPhoto" class="control-label col-md-2">Meny bild</label>
                <InputFile id="menuPhoto" class="form-control" OnChange="HandlePhotoUpload" />
            </div>
        </div>

        <div class="col-md-4">
            <p>Nuvarande bild:</p>
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(_editProduct.MenuPhoto)" alt="Menu Item Photo" style="height: 300px;">
        </div>

        <div class="form-group row">
            <div class="col-md-offset-2 col-md-3 text-right">
                <button type="submit" class="btn btn-primary">Uppdatera</button>
            </div>
        </div>
    </EditForm>
    <button type="submit" class="btn btn-danger" @onclick="NavigateBackToView">Avbryt</button>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool Error;
    private string ErrorMessage;
    private ProductValidation _editProduct = new ProductValidation();

    private class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public double Price { get; set; }
        public string Description { get; set; }
        public bool IsFoodItem { get; set; }
        public bool IsDeleted { get; set; }
        public byte[] MenuPhoto { get; set; }
        // Add other properties as necessary
    }

    protected override async Task OnInitializedAsync()
    {
        var product = await HttpClient.GetFromJsonAsync<Product>($"admin/products/{Id}");
        if (product != null)
        {
            _editProduct.Name = product.Name;
            _editProduct.Price = product.Price;
            _editProduct.Description = product.Description;
            _editProduct.IsFoodItem = product.IsFoodItem;
            _editProduct.MenuPhoto = product.MenuPhoto;
        }
        else
        {
            Error = true;
            ErrorMessage = "Ett fel uppstod när produkten laddades in";
        }
    }

    private async Task HandleValidSubmit()
    {
        var request = new EditProductRequest(
            Name: _editProduct.Name,
            Price: _editProduct.Price,
            Description: _editProduct.Description,
            MenuPhoto: _editProduct.MenuPhoto,
            IsFoodItem: _editProduct.IsFoodItem,
            IsDeleted: _editProduct.IsDeleted,
            SelectedAllergyIds: _editProduct.SelectedAllergyIds,
            SelectedCategoryIds: _editProduct.SelectedCategoryIds
        // Include other fields
        );

        var apiUrl = $"/admin/products/edit/{Id}";

        var response = await HttpClient.PutAsJsonAsync(apiUrl, request);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("admin/product/view");
        }
        else
        {
            Error = true;
            ErrorMessage = "Det gick inte att uppdatera informationen";
        }
    }

    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            _editProduct.MenuPhoto = ms.ToArray();
        }
    }

    private void NavigateBackToView()
    {
        NavigationManager.NavigateTo("/admin/product/view");
    }
}
