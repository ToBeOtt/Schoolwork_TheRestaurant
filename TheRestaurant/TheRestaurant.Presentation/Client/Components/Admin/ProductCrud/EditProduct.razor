@using TheRestaurant.Contracts.DTOs;
@using TheRestaurant.Contracts.Requests.Product;
@using TheRestaurant.Presentation.Client.Components.Admin.ProductCrud.DTO;
@using TheRestaurant.Presentation.Client.Components.Admin.ProductCrud.Validation;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager


@if (Error)
{
    <p>@ErrorMessage</p>
}
<MudPaper Class="pa-4">
    <h3>Redigera produkt</h3>
    <EditForm Model="_editProduct" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <MudTextField Label="Namn" @bind-Value="_editProduct.Name" FullWidth />
        <MudNumericField Label="Pris före moms" @bind-Value="_editProduct.PriceBeforeVat" FullWidth />
        <MudTextField Label="Beskrivning" @bind-Value="_editProduct.Description" FullWidth Multiline />

        <MudCheckBox Label="Mat/dryck?" @bind-Checked="_editProduct.IsFoodItem" />



        <MudSelect Label="Kategorier" T="string" MultiSelection="true" SelectedValuesChanged="HandleCategoriesSelection">
            @foreach (var category in categories)
            {
                <MudSelectItem Value="@category.Id.ToString()" Selected="@(_editProduct.SelectedCategoryIds.Contains(category.Id))">@category.Name</MudSelectItem>
            }
        </MudSelect>

        <MudSelect Label="Allergener" T="string" MultiSelection="true" SelectedValuesChanged="HandleAllergiesSelection">
            @foreach (var allergy in allergies)
            {
                <MudSelectItem Value="@allergy.Id.ToString()" Selected="@(_editProduct.SelectedAllergyIds.Contains(allergy.Id))">@allergy.Name</MudSelectItem>
            }
        </MudSelect>

        <MudSelect Label="Moms" T="int" @bind-Value="_editProduct.VatId">
            @foreach (var vat in vats)
            {
                <MudSelectItem Value="@vat.Id">@vat.Name - @vat.Adjustment</MudSelectItem>
            }
        </MudSelect>



        <InputFile OnChange="HandlePhotoUpload" />
        @if (_editProduct.MenuPhoto != null)
        {
            <div>
                <p>Nuvarande bild:</p>
                <img src="data:image/jpeg;base64,@Convert.ToBase64String(_editProduct.MenuPhoto)" alt="Menu Item Photo" style="height: 300px;">
            </div>
        }

        <div class="mt-2"> 
        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Uppdatera</MudButton>
        <MudButton Color="Color.Secondary" OnClick="NavigateBackToView">Avbryt</MudButton>
        </div>
    </EditForm>
</MudPaper>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool Error;
    private string ErrorMessage;
    private ProductValidation _editProduct = new ProductValidation();
    private List<DTO.AllergyDto> allergies = new List<DTO.AllergyDto>();
    private List<DTO.CategoryDto> categories = new List<DTO.CategoryDto>();
    private List<VATDto> vats = new List<VATDto>();

    protected override async Task OnInitializedAsync()
    {
        var product = await HttpClient.GetFromJsonAsync<ProductDto>($"admin/products/{Id}");
        if (product != null)
        {
            _editProduct.Name = product.Name;
            _editProduct.Price = product.Price;
            _editProduct.PriceBeforeVat = product.PriceBeforeVat;
            _editProduct.Description = product.Description;
            _editProduct.IsFoodItem = product.IsFoodItem;
            _editProduct.MenuPhoto = product.MenuPhoto;

            _editProduct.SelectedAllergyIds = product.Allergies.Select(a => a.Id).ToList();
            _editProduct.SelectedCategoryIds = product.Categories.Select(c => c.Id).ToList();
            _editProduct.VatId = product.VatId;

            categories = await HttpClient.GetFromJsonAsync<List<DTO.CategoryDto>>("api/category");
            allergies = await HttpClient.GetFromJsonAsync<List<DTO.AllergyDto>>("api/allergy");
            vats = await HttpClient.GetFromJsonAsync<List<VATDto>>("admin/vat");
        }
        else
        {
            Error = true;
            ErrorMessage = "Ett fel uppstod när produkten laddades in";
        }
    }

    private async Task HandleValidSubmit()
    {
        var request = new EditProductRequest(
            Name: _editProduct.Name,
            PriceBeforeVat: _editProduct.PriceBeforeVat,
            Description: _editProduct.Description,
            MenuPhoto: _editProduct.MenuPhoto,
            IsFoodItem: _editProduct.IsFoodItem,
            IsDeleted: _editProduct.IsDeleted,
            SelectedAllergyIds: _editProduct.SelectedAllergyIds,
            SelectedCategoryIds: _editProduct.SelectedCategoryIds,
            VatId: _editProduct.VatId
        
        );

        var apiUrl = $"/admin/products/edit/{Id}";

        var response = await HttpClient.PutAsJsonAsync(apiUrl, request);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("admin/product/view");
        }
        else
        {
            Error = true;
            ErrorMessage = "Det gick inte att uppdatera informationen";
        }
    }

    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            _editProduct.MenuPhoto = ms.ToArray();
        }
    }

    private void HandleCategoriesSelection(IEnumerable<string> selectedValues)
    {
        _editProduct.SelectedCategoryIds = selectedValues.Select(int.Parse).ToList();
    }

    private void HandleAllergiesSelection(IEnumerable<string> selectedValues)
    {
        _editProduct.SelectedAllergyIds = selectedValues.Select(int.Parse).ToList();
    }

    private void NavigateBackToView()
    {
        NavigationManager.NavigateTo("/admin/product/view");
    }
}
