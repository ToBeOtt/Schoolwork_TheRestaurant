@using System.Text.Json;
@using TheRestaurant.Contracts.Requests.Product;
@using TheRestaurant.Presentation.Client.Components.Admin.ProductCrud.DTO;
@using TheRestaurant.Presentation.Client.Components.Admin.ProductCrud.Validation;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager



@if(Error == true)
{
    <p>@ErrorMessage</p>
}

<div class="container mt-3">
    <div class="d-flex justify-content-start">
        <!-- This will align the form to the start of the flex container -->
        <div class="col-sm-10 col-md-8 col-lg-6">
            <!-- Adjust the column sizes as needed -->
            <h3>Skapa ny produkt</h3>
            <EditForm Model="_createProduct" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="name">Namn</label>
                    <InputText id="name" class="form-control" @bind-Value="_createProduct.Name" />
                    <ValidationMessage For="@(() => _createProduct.Name)" />
                </div>

                <div class="form-group">
                    <label for="price">Pris</label>
                    <InputNumber id="price" class="form-control" @bind-Value="_createProduct.Price" />
                    <ValidationMessage For="@(() => _createProduct.Price)" />
                </div>

                <div class="form-group">
                    <label for="description">Beskrivning</label>
                    <InputTextArea id="description" class="form-control" @bind-Value="_createProduct.Description" />
                    <ValidationMessage For="@(() => _createProduct.Description)" />
                </div>

                <div class="form-group">
                    <label for="isFoodItem">Mat/dryck?</label>
                    <InputCheckbox id="isFoodItem" @bind-Value="_createProduct.IsFoodItem" />
                    <ValidationMessage For="@(() => _createProduct.IsFoodItem)" />
                </div>

                <div class="form-group">
                    <label for="menuPhoto">Produkt bild</label>
                    <InputFile id="menuPhoto" class="form-control" OnChange="HandlePhotoUpload" />
                </div>

                <div class="form-group">
                    <label for="categories">Kategorier</label>
                    <select id="categories" class="form-control" multiple @onchange="HandleCategoriesSelection">
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="allergies">Allergener</label>
                    <select id="allergies" class="form-control" multiple @onchange="HandleAllergiesSelection">
                        @foreach (var allergy in allergies)
                        {
                            <option value="@allergy.Id">@allergy.Name</option>
                        }
                    </select>
                </div>

                <div class="form-group text-center mt-3">
                    <button type="submit" class="btn btn-success">Lägg till</button>
                    <a class="btn btn-danger" @onclick="NavigateToView">Avbryt</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private readonly ProductValidation _createProduct = new ProductValidation();
    private List<AllergyDto> allergies = new List<AllergyDto>();
    private List<CategoryDto> categories = new List<CategoryDto>();
    private bool Error;
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        allergies = await HttpClient.GetFromJsonAsync<List<AllergyDto>>("api/allergy");
        categories = await HttpClient.GetFromJsonAsync<List<CategoryDto>>("api/category");
    }

    private async Task HandleValidSubmit()
    {
        var request = new CreateProductRequest(
            Name: _createProduct.Name,
            Price: _createProduct.Price,
            Description: _createProduct.Description,
            MenuPhoto: _createProduct.MenuPhoto,
            IsFoodItem: _createProduct.IsFoodItem,
            IsDeleted: _createProduct.IsDeleted,
            SelectedAllergyIds: _createProduct.SelectedAllergyIds,
            SelectedCategoryIds: _createProduct.SelectedCategoryIds

        // Include Category & Allergy when implemented
        );

        var apiUrl = "/admin/products/create";

        var response = await HttpClient.PostAsJsonAsync(apiUrl, request);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("admin/product/view");
        }
        else
        {
            Error = true;
            ErrorMessage = "Det gick inte att registrera informationen";
        }
    }


    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            _createProduct.MenuPhoto = ms.ToArray();
        }
    }

    private void HandleAllergiesSelection(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        if (selectedOptions != null)
        {
            _createProduct.SelectedAllergyIds = selectedOptions.Select(int.Parse).ToList();
        }
    }

    private void HandleCategoriesSelection(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        if (selectedOptions != null)
        {
            _createProduct.SelectedCategoryIds = selectedOptions.Select(int.Parse).ToList();
        }
    }

    private void NavigateToView()
    {
        NavigationManager.NavigateTo("/admin/product/view");
    }
}
