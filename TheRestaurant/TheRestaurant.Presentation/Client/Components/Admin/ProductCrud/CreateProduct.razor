@using System.Text.Json;
@using TheRestaurant.Contracts.DTOs;
@using TheRestaurant.Contracts.Requests.Product;
@using TheRestaurant.Presentation.Client.Components.Admin.ProductCrud.DTO;
@using TheRestaurant.Presentation.Client.Components.Admin.ProductCrud.Validation;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@if(Error == true)
{
    <p>@ErrorMessage</p>
}
<MudGrid Class="mb-16">
    <MudItem xs="12" md="8" lg="6">
        <MudPaper Class="pa-4">
            <h3>Skapa ny produkt</h3>
                <EditForm Model="_createProduct" OnValidSubmit="HandleValidSubmit">

                
                <MudTextField Label="Namn" @bind-Value="_createProduct.Name" Required="true" FullWidth="true" />
                <MudNumericField Label="Pris" @bind-Value="_createProduct.Price" FullWidth="true" />
                <MudTextField Label="Beskrivning" @bind-Value="_createProduct.Description" FullWidth="true" Multiline="true" />
               

                <MudSelect Label="Kategorier" T="string" MultiSelection="true" SelectedValuesChanged="@(EventCallback.Factory.Create<IEnumerable<string>>(this, OnCategoriesChanged))">
                    @foreach (var category in categories)
                    {
                        <MudSelectItem Value="@category.Id.ToString()">@category.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect Label="Allergener" T="string" MultiSelection="true" SelectedValuesChanged="@(EventCallback.Factory.Create<IEnumerable<string>>(this, OnAllergiesChanged))">
                    @foreach (var allergy in allergies)
                    {
                        <MudSelectItem Value="@allergy.Id.ToString()">@allergy.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect Label="Moms" T="int" @bind-Value="_createProduct.VatId">
                    @foreach (var vat in vats)
                    {
                        <MudSelectItem Value="@vat.Id">@vat.Name - @vat.Adjustment</MudSelectItem>
                    }
                </MudSelect>

                <MudCheckBox Label="Mat/dryck?" @bind-Checked="_createProduct.IsFoodItem" />
                <div class="form-group">
                    <label for="menuPhoto">Produkt bild</label>
                    <InputFile id="menuPhoto" class="form-control" OnChange="HandlePhotoUpload" />
                </div>
                <div class="mt-2">
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Lägg till</MudButton>
                <MudButton Color="Color.Secondary" OnClick="NavigateToView">Avbryt</MudButton>
                </div>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    private readonly ProductValidation _createProduct = new ProductValidation();
    private List<DTO.AllergyDto> allergies = new List<DTO.AllergyDto>();
    private List<DTO.CategoryDto> categories = new List<DTO.CategoryDto>();
    private List<VATDto> vats = new List<VATDto>();
    private bool Error;
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        allergies = await HttpClient.GetFromJsonAsync<List<DTO.AllergyDto>>("api/allergy");
        categories = await HttpClient.GetFromJsonAsync<List<DTO.CategoryDto>>("api/category");
        vats = await HttpClient.GetFromJsonAsync<List<VATDto>>("admin/vat");
    }

    private async Task HandleValidSubmit()
    {
        var request = new CreateProductRequest(
            Name: _createProduct.Name,
            PriceBeforeVat: _createProduct.Price,
            Description: _createProduct.Description,
            MenuPhoto: _createProduct.MenuPhoto,
            IsFoodItem: _createProduct.IsFoodItem,
            IsDeleted: _createProduct.IsDeleted,
            SelectedAllergyIds: _createProduct.SelectedAllergyIds,
            SelectedCategoryIds: _createProduct.SelectedCategoryIds,
            VATId: _createProduct.VatId
    );

        var apiUrl = "/admin/products/create";

        var response = await HttpClient.PostAsJsonAsync(apiUrl, request);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("admin/product/view");
        }
        else
        {
            Error = true;
            ErrorMessage = "Det gick inte att registrera informationen";
        }
    }


    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            _createProduct.MenuPhoto = ms.ToArray();
        }
    }

    private async Task OnCategoriesChanged(IEnumerable<string> selectedValues)
    {
        _createProduct.SelectedCategoryIds = selectedValues.Select(int.Parse).ToList();
    }

    private async Task OnAllergiesChanged(IEnumerable<string> selectedValues)
    {
        _createProduct.SelectedAllergyIds = selectedValues.Select(int.Parse).ToList();
    }

    private void NavigateToView()
    {
        NavigationManager.NavigateTo("/admin/product/view");
    }
}
