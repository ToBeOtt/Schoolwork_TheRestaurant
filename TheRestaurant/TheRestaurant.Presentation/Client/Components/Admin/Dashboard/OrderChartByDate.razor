@using TheRestaurant.Presentation.Client.ClientServices
@inject ClientDashboardServices DashboardService

<div>
    <MudDatePicker Variant="Variant.Filled" @bind-Date="orderStartDate" Label="Start datum" ValueChanged="(date) => orderStartDate = date" MinDate="minDate" />
    <MudDatePicker Variant="Variant.Filled" @bind-Date="orderEndDate" Label="Slut datum" ValueChanged="(date) => orderEndDate = date" MaxDate="maxDate" />
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ReloadChart">Reload Chart</MudButton>
    @if (Series.Count == 0)
    {
        <p>@ErrorMessage</p>
    }
    else
    {
        <MudChart ChartType="ChartType.Bar"
                  ChartSeries="@Series"
                  XAxisLabels="@XAxisLabels"
                  Width="100%"
                  Height="350px">
        </MudChart>
    }
</div>
@code {
    private DateTime? orderStartDate;
    private DateTime? orderEndDate;
    DateTime minDate = DateTime.Today.AddMonths(-1);
    DateTime maxDate = DateTime.Today.AddDays(1);

    public List<ChartSeries> Series = new List<ChartSeries>();
    public string ErrorMessage { get; set; }

    public string[] XAxisLabels { get; set; }

    protected async Task ReloadChart()
    {
        try
        {
            var data = await DashboardService.GetOrderStatsByDateRange(orderStartDate.Value, orderEndDate.Value);

            if (data == null || !data.Any())
            {
                // Set the error message
                ErrorMessage = "Ingen data hittades under den tiden som valdes.";
                return;
            }

            // Map the data to the Series and XAxisLabels properties
            Series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Orders",
                Data = data.Select(d => d.OrderCount).ToArray()
            }
        };

            XAxisLabels = data.Select(d => $"{d.Date.ToString("MM-dd")}\n({d.OrderCount})").ToArray();

            // Clear the error message
            ErrorMessage = null;
        }
        catch (Exception ex)
        {
            // Set the error message to the exception message
            ErrorMessage = ex.Message;
        }
    }
}

