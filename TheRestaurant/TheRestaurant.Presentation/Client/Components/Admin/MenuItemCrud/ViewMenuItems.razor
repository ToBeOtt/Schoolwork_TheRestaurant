@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@if (menuItems == null)
{
    <p><em>Loading...</em></p>
}

@if (Error == true)
{
    <p>@ErrorMessage</p>
}

else
{
    <div class="container">
        <div class="row">
            @foreach (var menuItem in menuItems)
            {
                <div class="col-md-4 mb-3">
                    <div class="card card-flex-container" style="width:350px; height:500px;">
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(menuItem.MenuPhoto)" class="card-img-top" alt="Menu Item Photo" style="height: 350px; object-fit: cover;">
                        <div class="card-body">
                            <h5 class="card-title">@menuItem.Name</h5>
                            <p class="card-text">@menuItem.Description</p>
                        </div>
                        <div class="card-footer">
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => NavigateToEditMenuItem(menuItem.Id)">Edit</button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowConfirmation(menuItem.Id)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <button class="btn btn-primary" @onclick="NavigateToCreatePage">Create New Menu Item</button>
    <DeleteItemConfirmation @ref="deleteItemConfirmation" OnConfirmDelete="DeleteMenuItem" />
}

@code {
    private List<MenuItem> menuItems;
    private DeleteItemConfirmation deleteItemConfirmation;

    private bool Error;
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        menuItems = await HttpClient.GetFromJsonAsync<List<MenuItem>>("/admin/menuitems");
    }

    private class MenuItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public byte[] MenuPhoto { get; set; }
        // Other properties...
    }

    private void NavigateToCreatePage()
    {
        NavigationManager.NavigateTo("/admin/menuitem/create");
    }

    private void NavigateToEditMenuItem(int id)
    {
        NavigationManager.NavigateTo($"/admin/menuitem/edit/{id}");
    }

    private int itemToDeleteId;
    private void ShowConfirmation(int id)
    {
        itemToDeleteId = id;
        deleteItemConfirmation.Show("Are you sure you want to delete this item?", () => DeleteMenuItem(id));
    }

    private async Task DeleteMenuItem(int id)
    {
        id = itemToDeleteId;
        var apiUrl = $"/admin/menuitems/delete/{id}";

        var response = await HttpClient.DeleteAsync(apiUrl);

        if (response.IsSuccessStatusCode)
        {
            menuItems = await HttpClient.GetFromJsonAsync<List<MenuItem>>("admin/menuitems");
        }

        else
        {
            Error = true;
            ErrorMessage = "Det gick inte att registrera informationen";
        }
    }
}

