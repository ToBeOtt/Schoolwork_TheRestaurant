@using TheRestaurant.Contracts.Requests.MenuItem;
@using TheRestaurant.Presentation.Client.Components.Admin.MenuItemCrud.Validation;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<style>
    .form {
        padding-left: 25px;
    }
</style>
@if (Error)
{
    <p>@ErrorMessage</p>
}
<div class="form">
    <EditForm Model="_editMenuItem" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group row">
            <div class="col-md-3">
                <label for="name" class="control-label col-md-2">Name</label>
                <InputText id="name" class="form-control" @bind-Value="_editMenuItem.Name" />
                <ValidationMessage For="@(() => _editMenuItem.Name)" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-3">
                <label for="description" class="control-label col-md-2">Description</label>
                <InputTextArea id="description" class="form-control" @bind-Value="_editMenuItem.Description" />
                <ValidationMessage For="@(() => _editMenuItem.Description)" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-4">
                <label for="menuPhoto" class="control-label col-md-2">Menu Photo</label>
                <InputFile id="menuPhoto" class="form-control" OnChange="HandlePhotoUpload" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-offset-2 col-md-3 text-right">
                <button type="submit" class="btn btn-primary">Update</button>
            </div>
        </div>
    </EditForm>
    <button type="submit" class="btn btn-danger" @onclick="NavigateBackToView">Cancel</button>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool Error;
    private string ErrorMessage;
    private MenuItemValidation _editMenuItem = new MenuItemValidation();

    private class MenuItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public byte[] MenuPhoto { get; set; }
        // Add other properties as necessary
    }

    protected override async Task OnInitializedAsync()
    {
        var menuItem = await HttpClient.GetFromJsonAsync<MenuItem>($"admin/menuitems/{Id}");
        if (menuItem != null)
        {
            _editMenuItem.Name = menuItem.Name;
            _editMenuItem.Description = menuItem.Description;
            _editMenuItem.MenuPhoto = menuItem.MenuPhoto;
        }
        else
        {
            Error = true;
            ErrorMessage = "Ett fel uppstod när menu item laddes in";
        }
    }

    private async Task HandleValidSubmit()
    {
        var request = new EditMenuItemRequest(
            Name: _editMenuItem.Name,
            Description: _editMenuItem.Description,
            MenuPhoto: _editMenuItem.MenuPhoto
        // Include other fields
        );

        var apiUrl = $"/admin/menuitems/edit/{Id}";

        var response = await HttpClient.PutAsJsonAsync(apiUrl, request);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("admin/menuitem/view");
        }
        else
        {
            Error = true;
            ErrorMessage = "Det gick inte att uppdatera informationen";
        }
    }

    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            _editMenuItem.MenuPhoto = ms.ToArray();
        }
    }

    private void NavigateBackToView()
    {
        NavigationManager.NavigateTo("/admin/menuitem/view");
    }
}
