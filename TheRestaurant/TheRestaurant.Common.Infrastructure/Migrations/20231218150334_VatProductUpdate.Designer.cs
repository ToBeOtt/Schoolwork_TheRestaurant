// <auto-generated />
using System;
using Common.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TheRestaurant.Common.Infrastructure.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    [Migration("20231218150334_VatProductUpdate")]
    partial class VatProductUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Authentication.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EmploymentEnded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EmploymentStarted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("ParentalLeave")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ParentalLeaveEnded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ParentalLeaveStarted")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Peanuts"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Shellfish"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Milk"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Eggs"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Fish"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Tree nuts"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Wheat"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Soy"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Sesame"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Sulfites"
                        });
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Appetizers"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Salads"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = true,
                            Name = "Soups"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Pasta"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Steak"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = true,
                            Name = "Lamb"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Vegetarian"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Burgers"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Sandwiches"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "Rice"
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = true,
                            Name = "Sushi"
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            Name = "Non Alcoholic Beverages"
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = true,
                            Name = "Alcoholic Beverages"
                        },
                        new
                        {
                            Id = 16,
                            IsDeleted = false,
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 17,
                            IsDeleted = false,
                            Name = "Poultry"
                        },
                        new
                        {
                            Id = 18,
                            IsDeleted = false,
                            Name = "Merch"
                        },
                        new
                        {
                            Id = 19,
                            IsDeleted = false,
                            Name = "Kokbok"
                        },
                        new
                        {
                            Id = 20,
                            IsDeleted = false,
                            Name = "T-shirt"
                        },
                        new
                        {
                            Id = 21,
                            IsDeleted = false,
                            Name = "Kaffe mugg"
                        },
                        new
                        {
                            Id = 22,
                            IsDeleted = false,
                            Name = "Såspanna"
                        });
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFoodItem")
                        .HasColumnType("bit");

                    b.Property<byte[]>("MenuPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("PriceBeforeVAT")
                        .HasColumnType("float");

                    b.Property<int>("VATId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VATId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Hamburgare med krispiga pommes",
                            IsDeleted = false,
                            IsFoodItem = true,
                            Name = "Hamburgare med pommes",
                            Price = 88.480000000000004,
                            PriceBeforeVAT = 79.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "God kebabpizza med färska grönsaker",
                            IsDeleted = false,
                            IsFoodItem = true,
                            Name = "Kebabpizza",
                            Price = 110.88,
                            PriceBeforeVAT = 99.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Grillad lax med dill och citronsås",
                            IsDeleted = false,
                            IsFoodItem = true,
                            Name = "Grillad lax",
                            Price = 144.47999999999999,
                            PriceBeforeVAT = 129.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Krispig sallad med kyckling och caesardressing",
                            IsDeleted = false,
                            IsFoodItem = true,
                            Name = "Caesarsallad",
                            Price = 99.680000000000007,
                            PriceBeforeVAT = 89.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Friterade mozzarella sticks med dipp",
                            IsDeleted = false,
                            IsFoodItem = true,
                            Name = "Mozzarella Sticks",
                            Price = 54.880000000000003,
                            PriceBeforeVAT = 49.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Varm chokladkaka med flytande kärna",
                            IsDeleted = false,
                            IsFoodItem = true,
                            Name = "Chokladfondant",
                            Price = 77.280000000000001,
                            PriceBeforeVAT = 69.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Kryddig vegetarisk curry med ris",
                            IsDeleted = false,
                            IsFoodItem = true,
                            Name = "Vegetarisk curry",
                            Price = 122.08,
                            PriceBeforeVAT = 109.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Syrlig thailändsk soppa med räkor",
                            IsDeleted = false,
                            IsFoodItem = true,
                            Name = "Tom Yum Soppa",
                            Price = 133.28,
                            PriceBeforeVAT = 119.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "Grillade lammkotletter med rosmarin",
                            IsDeleted = false,
                            IsFoodItem = true,
                            Name = "Lammkotletter",
                            Price = 166.88,
                            PriceBeforeVAT = 149.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 10,
                            Description = "Blåbärspaj med vaniljsås",
                            IsDeleted = false,
                            IsFoodItem = true,
                            Name = "Blåbärspaj",
                            Price = 66.079999999999998,
                            PriceBeforeVAT = 59.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 11,
                            Description = "Klassisk kolsyrad läsk med unik smak",
                            IsDeleted = false,
                            IsFoodItem = false,
                            Name = "Cola",
                            Price = 22.399999999999999,
                            PriceBeforeVAT = 20.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 12,
                            Description = "Fruktig apelsinläsk med kolsyra",
                            IsDeleted = false,
                            IsFoodItem = false,
                            Name = "Fanta",
                            Price = 22.399999999999999,
                            PriceBeforeVAT = 20.0,
                            VATId = 1
                        },
                        new
                        {
                            Id = 13,
                            Description = "Öl från lokala mikrobryggerier",
                            IsDeleted = false,
                            IsFoodItem = false,
                            Name = "Lokalt mikrobryggeri öl",
                            Price = 50.0,
                            PriceBeforeVAT = 40.0,
                            VATId = 3
                        },
                        new
                        {
                            Id = 14,
                            Description = "Välbalanserat rödvin från husets urval",
                            IsDeleted = false,
                            IsFoodItem = false,
                            Name = "Husets röda vin",
                            Price = 75.0,
                            PriceBeforeVAT = 60.0,
                            VATId = 3
                        },
                        new
                        {
                            Id = 15,
                            Description = "Isolerad resemugg",
                            IsDeleted = false,
                            IsFoodItem = false,
                            Name = "Kaffe mugg",
                            Price = 150.0,
                            PriceBeforeVAT = 120.0,
                            VATId = 2
                        },
                        new
                        {
                            Id = 16,
                            Description = "Kokbok som innehåller alla våra goda recept",
                            IsDeleted = false,
                            IsFoodItem = false,
                            Name = "Kokbok",
                            Price = 104.94,
                            PriceBeforeVAT = 99.0,
                            VATId = 2
                        },
                        new
                        {
                            Id = 17,
                            Description = "Högkvalitativ såspanna perfekt för alla typer av såser",
                            IsDeleted = false,
                            IsFoodItem = false,
                            Name = "Såspanna",
                            Price = 562.5,
                            PriceBeforeVAT = 450.0,
                            VATId = 2
                        });
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.ProductAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAllergies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllergyId = 7,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            AllergyId = 9,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            AllergyId = 3,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 4,
                            AllergyId = 7,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            AllergyId = 5,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 6,
                            AllergyId = 3,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 7,
                            AllergyId = 7,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 8,
                            AllergyId = 1,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 9,
                            AllergyId = 3,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 10,
                            AllergyId = 7,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 11,
                            AllergyId = 2,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 12,
                            AllergyId = 5,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 13,
                            AllergyId = 1,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 14,
                            AllergyId = 7,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 15,
                            AllergyId = 1,
                            ProductId = 13
                        });
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 9,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 11,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 7,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 16,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 8,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 12,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 6,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 16,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 14,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 14,
                            ProductId = 12
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 15,
                            ProductId = 13
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 15,
                            ProductId = 14
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 18,
                            ProductId = 15
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 18,
                            ProductId = 16
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 18,
                            ProductId = 17
                        });
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.VAT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Adjustment")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VATs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adjustment = 1.1200000000000001,
                            IsDeleted = false,
                            Name = "Mat"
                        },
                        new
                        {
                            Id = 2,
                            Adjustment = 1.0600000000000001,
                            IsDeleted = false,
                            Name = "Böcker"
                        },
                        new
                        {
                            Id = 3,
                            Adjustment = 1.25,
                            IsDeleted = false,
                            Name = "Alkohol"
                        },
                        new
                        {
                            Id = 4,
                            Adjustment = 1.25,
                            IsDeleted = false,
                            Name = "Produkter/Kläder"
                        });
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OrderComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 31,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 18, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1560),
                            OrderStatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 18, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1567),
                            OrderStatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 18, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1569),
                            OrderStatusId = 1
                        },
                        new
                        {
                            Id = 34,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 16, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1571),
                            OrderStatusId = 1
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 15, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1574),
                            OrderStatusId = 3
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 14, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1576),
                            OrderStatusId = 4
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 17, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1578),
                            OrderStatusId = 5
                        },
                        new
                        {
                            Id = 32,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 17, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1580),
                            OrderStatusId = 2
                        },
                        new
                        {
                            Id = 33,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 17, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1582),
                            OrderStatusId = 5
                        },
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 18, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1513),
                            OrderStatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 17, 16, 3, 33, 962, DateTimeKind.Local).AddTicks(1553),
                            OrderStatusId = 3
                        });
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Orders.OrderRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderRows");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            OrderId = 31,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 17,
                            OrderId = 31,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 18,
                            OrderId = 4,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 19,
                            OrderId = 4,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 20,
                            OrderId = 5,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 21,
                            OrderId = 6,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 22,
                            OrderId = 6,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 23,
                            OrderId = 32,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 24,
                            OrderId = 32,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 25,
                            OrderId = 33,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 26,
                            OrderId = 34,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 27,
                            OrderId = 10,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 28,
                            OrderId = 11,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 1,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            OrderId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            OrderId = 2,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            OrderId = 2,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            OrderId = 2,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            OrderId = 2,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            OrderId = 2,
                            ProductId = 10
                        });
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Orders.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Status = "Delivered"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Status = "Cancelled"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = true,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TheRestaurant.Domain.Entities.Authentication.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TheRestaurant.Domain.Entities.Authentication.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheRestaurant.Domain.Entities.Authentication.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TheRestaurant.Domain.Entities.Authentication.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.Product", b =>
                {
                    b.HasOne("TheRestaurant.Domain.Entities.Menu.VAT", "VAT")
                        .WithMany()
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VAT");
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.ProductAllergy", b =>
                {
                    b.HasOne("TheRestaurant.Domain.Entities.Menu.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheRestaurant.Domain.Entities.Menu.Product", "Product")
                        .WithMany("ProductAllergies")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.ProductCategory", b =>
                {
                    b.HasOne("TheRestaurant.Domain.Entities.Menu.Category", "Category")
                        .WithMany("MenuItemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheRestaurant.Domain.Entities.Menu.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("TheRestaurant.Domain.Entities.Authentication.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("TheRestaurant.Domain.Entities.Orders.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Orders.OrderRow", b =>
                {
                    b.HasOne("TheRestaurant.Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderRows")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheRestaurant.Domain.Entities.Menu.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.Category", b =>
                {
                    b.Navigation("MenuItemCategories");
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Menu.Product", b =>
                {
                    b.Navigation("ProductAllergies");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderRows");
                });

            modelBuilder.Entity("TheRestaurant.Domain.Entities.Orders.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
